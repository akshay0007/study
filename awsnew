AWS::

compute ,storage ,database , and various other service

aws sdk docs::

https://docs.aws.amazon.com/code-samples/latest/catalog/java-s3control-src-main-java-aws-example-s3control-CreateJob.java.html
 
https://github.com/awsdocs/aws-doc-sdk-examples/tree/master/java

https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/java/example_code/sqs/src/main/java/aws/example/sqs/LongPolling.java

https://docs.aws.amazon.com/sdk-for-ruby/v3/developer-guide/hello.html

https://aws.amazon.com/developer/community/heroes/?community-heroes-all.sort-by=item.additionalFields.sortPosition&community-heroes-all.sort-order=asc
servicess::
open guide::

https://github.com/open-guides/og-aws

ECS (elastic container service)

 

IAM(identity and access mgt)

 

EC2(elastic compute cloud)

 

S3(simple storage service)

 

RDS(relation databse service)

 



 

Elastic beanstalk:

deployment

monitoring

scaling

 

creating new app ::

and set up some small data

 

web server enviromement select

 

now select env. type

 

predefined config. java

now env. type : load  balancing ,auto scaling

 

source : upload your project

  

AWS EC2(elastic configure cloud) configure:

 

setting up an elastic beanstalk app

setting up env. variable

setting up amazon ec2 instance

setting up RDS

setting up VPC

 

go to elaticbeanstalk home

 

 

now env.

java

single instance

 

setting up env. variable::

additonal resource select both

 

now go to configure details:

 

instance ::

t1.micro

 

select key pair when we wants to login from remote

 

email address:

 

helth reporting::

choose basic

 

root volumn:ssd also

 

env. tags

 

RDS configure::(relational database services)

 

instance class:

 

relational setting : delete

availablity zone :

 

setting up VPC::()

vpc drop down:keep default

 

permission:

 

AWS deployment and launching ::

review the configuration

fine tuning

launching app and gtting to helth ok status

reflecting without restart

 

allapplicaition=>myapp =>configuration

 

instance type=>t2.micro(in free tire)

 

fine tuning env. variables:

 

configuraiton overview

software

server_port :8080

 

database::

 

 

launch app check for helth ok status

 

 

testing our depolyed app::

 

dns service also helpfull for providing domain name

 

now checking put method::

security scalablity and docker:

 

log monitoring for security

docker:: as a containers

 

 

AWS security::

 

 

AWS security::

awsstatic whitepapers compl

aws auditing security checklist pdf

 

 

VPC (virtual private cloud):provide newtwork isolation

quite similater to virtual env.

 

remote access via VPN:

 

identity and access mgt.

 

scalablity::

 

 

handle increasing load

EC2 auto scaling

app auto scaling

aws auto scaling

 

add remove ec2 capcity

scale based on condition

 

AWS auto scaling

 

creating auto scaleing=>launch configure

=>free tier eligible=>t2.micro

 

deploy user app to scale b/w 3 to 10

configure noti.

exp. with various auto scaling types and test

 

docker::

Software platform for containing application

 

it's similar to vm

provide os for running application

 

scalablity in docker is easily define

 

ship isolated service fast

 

continous intergation and delivery

 

data processing

 

AWS fargate - run docker container without deploying or mangaging infra

 

Amazon EKS -run kubernetes on aws without installing kubernates

 

Amazon ECR -secure private container repo to store docer images
AWS sysops::

 

 

 

AWS looking for

deploy manage operate

scalablity HA fault taul.

 

 

==========================================================

implement and control the flow of data to and from AWS::

 

learn well arch. framwork

 

 

 

amazon web service linux ops:;

https://github.com/talentedmrjones/amazon-web-services-linux-operations

 

experiment with cli and sdk

 

cli written in python.

 

create infrastructure diagrams.

 

knoweldge of arch. is absolutely require.

 

Graph db,

 

remove single point failure

 

 

caching ::

  content caching

  in memory caching (for db)

 

security::

  

serveice and resource scope::

avaiablity:: IAAS ,PAAS (infromation, Platform)

Region :: IAAS ,PAAS,SAAS

GLOBAL:: CDN,DNS

 

cli introduction:

 

AWS provide rest end point

also checking backdoors of access

 

 

rest end point surrounded by aws console ,cli, sdk

 

 

aws cli concepts::

 

needs of pip for  installing aws cli if you don't have python then can use standalone standards

 

in windows there are msi installation for it

 

 

cli configuration:

mfa used for security

 

aws cli command format

--profile

--region

--output ==>json ,text

 

--endpoint-url

--generate-cli-skeleton

 

 

--query:restrict o/p to specific properties

JMESPath query support

 

--filter: rest. o/p to specific object

 

aws ec2 describe-instance --output text \

 

--query ''

--filter Name=group-Name,Value-..

 

 

AWS sdk options ::

more usages:: go, python ,node.js

 

 

case study cli and sdk::

 

 

boto3 library for delete volumn in aws

 

EFS:: block storage service.

 

EBS isnot a service

 

 

monitoring and performance::

create ,manintain and alarm utilization

 

cloud watch::(push based service)

metric collection

log collection

alarm

event

 

 

EC2::

cpu util

n/w in ,out

cpu credit balance

 

 

========================================================

Elastic loading balance server strategy::

classic load balacer(layer 4 and 7 mixture)

Application load balancer

Network load balancer(layer 4 works on tcp protocol)

 

 

Databases::

RDS::Aurora

 

Cloud watch custom matrix::

 

custom metrics options::

cloud watch agent

use scripts or sdk to post metrics

 

cloud watch agent install via ssm::

launch ec2 instance

ensure ssm compatiblity

ensure agent must me installed and running

create IAM role

 

create config file from instace os shell

 

 

cloud watch alarms::

insuff. data

ok

alarm

 

ec2==>stop ,reboot, terminate, recovery

autoscaling:exe. scaling policis

sns==>notifiy

sns==>trigger lambda function

 

trigger lambda fun.

 

ec2 has two diff. type of status check::

n/w connect.

phy. host  pow.

oom

corrupt vol.

kenal issue.

 
aws
ec2 status checks

EBS volumn::


RDS check::

undersized NAT instance
undersized RDS instance
undersized EC2 instance


monitoring logs::


cloud watch event::

events->rules->target

not all services supp.->match event-> labda,ec2 run commnand,kinessis firehose


Amazon ec2 instance
aws labda funtion
streams in amzon kinesis data
amzon ecs tasks
aws batch jobs
aws manger automation


pipe line aws code pipeline
aws codebuild projects
amazon inspector assements templetes
amazon sns topics
amazon sqs queues
built targets
default event bus of another aws account


cloud watch logs::
aggregate the logs from multiple services.
aggregate-->multiple source
store-->durable And reliable
access-->console cli,sdk
monitors-->metrics filter


best practices::
no single point failure
inte. with aws eco system
aggregation point for custom logs
cost based on data ingestion rate and storage

cloudwatch logs built in sources::
route53,cloud trail,labda,api gateways

custom sources for cloud watch:;
ec2 application,other cloud resource,on premicess server

requires configuration file(via s3 etc)
great for os and application logs

automate install(similar to cloud watch)::
 ami
 ec2 user data
 configuration mgt software
 ssm run command

genrate acccess logs for different service
s3==> can be in same bucket but for best practice needs to store in differnt bucket
cloud front==>s3()
elb==s3
api gateway==>cw log(cloud watch logs)

permission::
s3==>has is three diff. ways to greant acc(iam ,bucket,access control)
bucket ecl
cloudfront==>bucket ecl
elb==>bucket policies
api gateway==>iam role

case study on monitoring logs::
log monitoring and storage::
requ. of access and security logs.
and also place logs cloud watch and s3

now comes to place logs::
like api gateways==>place cloud watch
ALB ==>if in s3 place into it
ec2==>cw

vpc flow logs-->into cloud watch

now intergate s3 and cloud watch using cloud trail (bcoz it pushes all logs b/w both)

solution
cloud watch ==lambda==s3

also create kinesis fire house subscription filter 

cli gives u on demeand sevice but automaion is harder

High availablity::



 

 

 

High avaliablity::

 

fault tolerance::

 

VPC::

NAT GW:: save from single point failure.

 

egress point are all HA/FT==>handle via internet gateway

 

 

ELB::(HA percepective)

 

classic load balancer:: layer 4 and 7

support EC2 classic

 

ALB::(application load balancer)

  layer 7

  path based routing

 

 

NLB ::(n/w layer balancer)

layer 4

static ip entry point

 

ELB high avl.::

 

zone availablity:

 

Auto scaling::

flag ship service:

high availablity

optimize cost

temp. resource

 

regional service scope::

 

read all docs on auto scaling operation

learn auto scaling service

 

 

Auto scaling elementes

launch config=>auto scaling group=>auto scaling policies==>schedueld actions

instance        location          event driven scaling    time drive scaling

details                   limit,assocaitn

 

association of one more Load balancer

event drive via cloud watch

 

 

manage auto scale policies::

scaling large and small group

min and max no. of instance manage

roll out launch config

manual task for lifecycle hooks

manage cool down periods

 

auto scaling scenerio::

state less webapp

app. with unpredictable traffic

steady state group

message queue consu. app.

 

 

Anti scenrio

appl. with session stickiness

monolathic app.

app. with fixed ip address.

app. with many manual deploy steps

app. with short large ,random  trafic spikes

 

HA component:: behind load balancer and vpc::

suppose in case of one instance is not working then new instance create

if entire infra. down then vpc handle

automatic elastic: it launched new instance for that

 

 

HA. DNS::

route s3 basic

register domains and serve dns records.

100% time sla

serveral routing options

health checks

failover

intergation points with aws resource

 

routing s3 support multiple end point for HA

routing ::

   latency based

   weighted round roubin

  

ALIAS records::(new dns )

  pointer to aws resource

  avoid using ip addressing as spof

 

EC2 autorecovery::

  maintain istance id

  migrate in new hardware

 

RDS::(relational database)

remove all os installation ,backup ,patch and updates,handle failover

it reduce risks

 

elastic beanstalk:

service contribute high HA

manageging entire app

region scoped service

can be configured with no single points of failure

platform deploys choice of the following::

elastic load balancer

EC2

auto scaling

RDS

 

not really infra. as a serveice or plat. as a service

no single point of failure

it can take care of of all above four

 

further reading::

support web server s/w

support languages

appl. cloning workflow

appl. dep. options

deployment rollback options

 

Tradeoff::

block storage volumn.

tradeoff container services::

 

infra. as service==>ec2

platform as sevcie==>beanstalk

 

 

deployment and provisioning::

infra as code provisioning

containers and code deployment

 

 

Infra as a code::

manual provisoning::

from console we cannnot automate

then work in cli

sdk for automation

api can be automated

 

 

bootstrapping building block

user data

cloudformation cfn update

configuration mgt s/w

 

 

all three are container based deployed

ops works

elstic bean

ecs/eks

 

cloud formation::

flagship service as part of resource deployment

infra as a code

inter. with all aws

deploy infra. and chages

does not operate on data

 

cloud formation templete::

description

metadata

parameter

mapping

condtion

transfrom

resource

output

 

network templete::

vpc

subnetes,route templete,internete gateways

 

load balancer templete::

 

ops works:

hybrid ::

configure mgt+infra as code

chef automate

puppet ent.

stacks consist of layer

ec2 (mulitple layers)

elb

rds

ecs

custom

 

manage service=higher avai.

 

many intergation points with aws eco.

 

 

elastic beanstalk::(now for depoly resources)

kinds works in b/w infra and platform as service

 

application (top level)

enviroment (dev,stage etc)

  tier ,config ,config templete

    version

 

mge platform::

elb

ec2

auto scaling

rds

resource creat,del,updae opr

still requ. os mgt

does not address mult. regional

 

deployment options:

rolling update

  new ec2 instance req.

rolling depl.

 

blue green deployment::

when u have ext. res. that is curr. dep. in prod. its blue deply

now want to update something on it then this called greenn deply

it can be implement via elastic benastalk

now user move blue to green now if it goes to 0 100 then compl. restore traffic

 

cloud formation templetes can also be used for that purpose

 

 

many other possiblities also in there::

ecs(contianer verion rather instance)

opsworks

codedeploy

multiple options for cloud fromation

multiple opt. for autoscaling

and others

 

infra as a code service::

 

container code deployement::

 

services:: ecs ,eks,code deployment

system manager run commands

system manager run commands

previously ec2 run commnads

 

ec2 instance            on premisess

access to ssm                     access to ssm

vpc only                               iam service role

os version restr. mgd inst. act. cret.

IAM role                               ssm agent

ssm agent                          

instance tags created    

  

ECS and EKS::

ecs::

depl. container without managing infra.

support docker and window cont.

choice of ec2(platfrom as a serv.) or fargate to host cont.

 

 

cluster

  sevice:: auto sca. target group. def.

 

task def.

  cont. img. ,comp. res.

 

EKS(kubernates)::

not supp. windows container

supp. of docker

 

  

code deploy::

deploy to ec2 ,lambda,

file and command bas fram

rolling update

blue green dep.

stop and rollback

its not package repository

 

centralized control

 

aws labda::server less

elastic map reduce::hadoop

aws system manager:: inverntory ,patch and parms

 

 

storage and data mgt::

backup in aws::

 

EBS snapshot

 incrase durablity

option to share across acc.

option to copy to diff. region

 

ephemeral volumn::

no native backup fun.

can do file level synch

daily snapshot

 

 

backup dynmodb::

 

back up in s3::

bucket versioning

increase cost

lifecycle policies for version

 

cross region replication::

cli based copy or sync

 

vm import /export

aws connector for vcenter(VMware)

 

file gateway:

 share s3 buckets

 run on remises or in ec2

 

volumn gateway::

cached mode

stored mode

 

 

tape gateway::

ssm run command:: charges money

lambda function:: charges money

 

Disaster recovery::
learn the 4 DR scenarios::
backup and restore
pilot light
warm standby
multi site solution

backup and restore preparation::
		    backupdata into s3	
corporate data center --------------->aws cloud(create ami and n/w infra)
					create elb launch ec2 /RDS restore data

   perform dns cutover configure monitoring configure ci./cd

backup and resore strategies(4 is bad 1 is good)
RTO-4
RPO-4
cost-1
time to imp-1
complexcity to mge-1

provision ec2 scale db

promote db replica
promote dns custover
confiugre monitore
configure ci/cd

scale ec2 horizontally
scale db2 vertically
dns cutover if needed

multi site preparation::
 


pilot light::(const. replica)
RTO-3 recovery time object
RPO-3 recovery point object 
cost-2
time to imp-2
complexcity to mge-2

warm standby ::cofigure 2 way db replication
RTO-3 recovery time object
RPO-3 recovery point object 
cost-2
time to imp-2
complexcity to mge-2

warm standby ::cofigure 2 way db replication
RTO-2 recovery time object
RPO-2 recovery point object 
cost-3
time to imp-3
complexcity to mge-3



multi site::
RTO-1 recovery time object
RPO-1 recovery point object 
cost-4
time to imp-4
complexcity to mge-4

data retention compliance::
passive::
 configureation change or periodic triggers
 evealute changes through aws config
 apply build in rule or custom (labda fun)

service catalog:
 active service:
 createing non compliance templetes
 can create constraints
 users access service catalog
 
